# Helm 설정값
global:
  storageClass: "redis-ebs-sc"

## StorageClass 설정 (선택적 배포)
existingStorageClass:
  enabled: true
  name: redis-ebs-sc
  provisioner: ebs.csi.aws.com
  parameters:
    type: gp3
    fsType: ext4
  volumeBindingMode: WaitForFirstConsumer
  allowVolumeExpansion: true

## StatefulSet 기본 설정
architecture: standalone
auth:
  enabled: false
replica:
  replicaCount: 3  # 3개
service:
  name: redis

## 스토리지 설정
master:
  persistence:
    enabled: true
    storageClass: "redis-ebs-sc"
    size: 3Gi
    accessModes:
      - ReadWriteOnce

  ## 로깅 시스템
  extraVolumes:
    - name: redis-logs
      persistentVolumeClaim:
        claimName: redis-log-pvc   # PVC 연결로 Pod 재시작시 데이터 유지

  extraVolumeMounts:
    - name: redis-logs
      mountPath: /var/log/redis

  configmap: |-
    # 로그 설정
    logfile /var/log/redis/redis.log
    loglevel notice
    
    # 백업 정책
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    appendfsync everysec
    dir /data

## 백업 CronJob
backup:
  enabled: true
  schedule: "0 3 * * *"  # 매일 03:00 실행
  storage:
    storageClass: redis-ebs-sc-test
    size: 5Gi
  s3:
    enabled: true  # S3 업로드 활성화
    bucket: "your-redis-backup-bucket"
    region: "ap-northeast-2"
    lifecycleRule: |
      {
        "Rules": [
          {
            "ID": "GlacierTransitionRule",
            "Status": "Enabled",
            "Prefix": "redis-backups/",
            "Transitions": [
              {
                "Days": 1,
                "StorageClass": "GLACIER"
              }
            ]
          }
        ]
      }
  image:
    repository: amazon/aws-cli  # S3 업로드용 이미지 변경
    tag: 2.13.0
  command: |
    #!/bin/bash
    # 1. Redis 데이터 덤프 생성
    redis-cli -h $REDIS_HOST BGSAVE
    
    # 2. 덤프 파일 대기 (최대 5분)
    COUNTER=0
    while [ ! -f /data/dump.rdb ] && [ $COUNTER -lt 300 ]; do
      sleep 1
      ((COUNTER++))
    done
    
    # 3. S3 업로드 + 메타데이터 추가
    TODAY=$(date +%Y%m%d)
    aws s3 cp /data/dump.rdb s3://{{ .Values.backup.s3.bucket }}/redis-backups/${TODAY}.rdb \
      --metadata x-amz-storage-class=STANDARD \
      --region {{ .Values.backup.s3.region }}
    
    # 4. 로컬 백업 삭제 (옵션)
    rm -f /data/dump.rdb

  # AWS 권한 설정
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/redis-backup-role"  # IRSA 사용시

## 로깅 시스템 개선
logging:
  s3:
    enabled: true
    bucket: "your-redis-logs-bucket"
    region: "ap-northeast-2"
    uploadInterval: "daily"  # hourly/daily/weekly
  fluentbit:  # Fluent Bit 통합
    enabled: true
    config: |
      [INPUT]
          Name tail
          Path /var/log/redis/*.log
          Tag redis_logs

      [OUTPUT]
          Name s3
          Match *
          bucket {{ .Values.logging.s3.bucket }}
          region {{ .Values.logging.s3.region }}
          total_file_size 100M
          upload_timeout 1m
